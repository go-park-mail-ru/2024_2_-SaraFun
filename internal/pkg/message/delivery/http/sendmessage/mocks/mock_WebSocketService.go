// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2024_2_SaraFun/internal/pkg/message/delivery/http/sendmessage (interfaces: WebSocketService)

// Package sign_up_mocks is a generated GoMock package.
package sign_up_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWebSocketService is a mock of WebSocketService interface.
type MockWebSocketService struct {
	ctrl     *gomock.Controller
	recorder *MockWebSocketServiceMockRecorder
}

// MockWebSocketServiceMockRecorder is the mock recorder for MockWebSocketService.
type MockWebSocketServiceMockRecorder struct {
	mock *MockWebSocketService
}

// NewMockWebSocketService creates a new mock instance.
func NewMockWebSocketService(ctrl *gomock.Controller) *MockWebSocketService {
	mock := &MockWebSocketService{ctrl: ctrl}
	mock.recorder = &MockWebSocketServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebSocketService) EXPECT() *MockWebSocketServiceMockRecorder {
	return m.recorder
}

// WriteMessage mocks base method.
func (m *MockWebSocketService) WriteMessage(arg0 context.Context, arg1, arg2 int, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockWebSocketServiceMockRecorder) WriteMessage(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockWebSocketService)(nil).WriteMessage), arg0, arg1, arg2, arg3, arg4)
}
