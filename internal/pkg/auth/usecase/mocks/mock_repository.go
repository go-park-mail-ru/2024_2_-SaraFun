// Code generated by MockGen. DO NOT EDIT.
// Source: sparkit/internal/usecase/session (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/go-park-mail-ru/2024_2_SaraFun/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddSession mocks base method.
func (m *MockRepository) AddSession(arg0 context.Context, arg1 models.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSession indicates an expected call of AddSession.
func (mr *MockRepositoryMockRecorder) AddSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockRepository)(nil).AddSession), arg0, arg1)
}

// CheckSession mocks base method.
func (m *MockRepository) CheckSession(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckSession indicates an expected call of CheckSession.
func (mr *MockRepositoryMockRecorder) CheckSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSession", reflect.TypeOf((*MockRepository)(nil).CheckSession), arg0, arg1)
}

// DeleteSession mocks base method.
func (m *MockRepository) DeleteSession(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockRepositoryMockRecorder) DeleteSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockRepository)(nil).DeleteSession), arg0, arg1)
}

// GetUserIDBySessionID mocks base method.
func (m *MockRepository) GetUserIDBySessionID(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDBySessionID", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDBySessionID indicates an expected call of GetUserIDBySessionID.
func (mr *MockRepositoryMockRecorder) GetUserIDBySessionID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDBySessionID", reflect.TypeOf((*MockRepository)(nil).GetUserIDBySessionID), arg0, arg1)
}
