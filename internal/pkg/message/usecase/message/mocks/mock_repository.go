// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2024_2_SaraFun/internal/pkg/message/usecase/message (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_2_SaraFun/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockRepository) AddMessage(arg0 context.Context, arg1 *models.Message) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessage", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockRepositoryMockRecorder) AddMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockRepository)(nil).AddMessage), arg0, arg1)
}

// GetChatMessages mocks base method.
func (m *MockRepository) GetChatMessages(arg0 context.Context, arg1, arg2 int) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessages", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMessages indicates an expected call of GetChatMessages.
func (mr *MockRepositoryMockRecorder) GetChatMessages(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessages", reflect.TypeOf((*MockRepository)(nil).GetChatMessages), arg0, arg1, arg2)
}

// GetLastMessage mocks base method.
func (m *MockRepository) GetLastMessage(arg0 context.Context, arg1, arg2 int) (models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastMessage indicates an expected call of GetLastMessage.
func (mr *MockRepositoryMockRecorder) GetLastMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastMessage", reflect.TypeOf((*MockRepository)(nil).GetLastMessage), arg0, arg1, arg2)
}

// GetMessagesBySearch mocks base method.
func (m *MockRepository) GetMessagesBySearch(arg0 context.Context, arg1, arg2 int, arg3 string) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesBySearch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesBySearch indicates an expected call of GetMessagesBySearch.
func (mr *MockRepositoryMockRecorder) GetMessagesBySearch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesBySearch", reflect.TypeOf((*MockRepository)(nil).GetMessagesBySearch), arg0, arg1, arg2, arg3)
}
