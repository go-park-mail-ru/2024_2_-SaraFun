// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2024_2_SaraFun/internal/pkg/message/usecase/report (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_2_SaraFun/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddReport mocks base method.
func (m *MockRepository) AddReport(arg0 context.Context, arg1 models.Report) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReport", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReport indicates an expected call of AddReport.
func (mr *MockRepositoryMockRecorder) AddReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReport", reflect.TypeOf((*MockRepository)(nil).AddReport), arg0, arg1)
}

// GetReportIfExists mocks base method.
func (m *MockRepository) GetReportIfExists(arg0 context.Context, arg1, arg2 int) (models.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportIfExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportIfExists indicates an expected call of GetReportIfExists.
func (mr *MockRepositoryMockRecorder) GetReportIfExists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportIfExists", reflect.TypeOf((*MockRepository)(nil).GetReportIfExists), arg0, arg1, arg2)
}
