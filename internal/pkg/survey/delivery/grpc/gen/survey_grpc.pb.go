// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: survey.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Survey_AddSurvey_FullMethodName     = "/survey.Survey/AddSurvey"
	Survey_GetSurveyInfo_FullMethodName = "/survey.Survey/GetSurveyInfo"
)

// SurveyClient is the client API for Survey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyClient interface {
	AddSurvey(ctx context.Context, in *AddSurveyRequest, opts ...grpc.CallOption) (*AddSurveyResponse, error)
	GetSurveyInfo(ctx context.Context, in *GetSurveyInfoRequest, opts ...grpc.CallOption) (*GetSurveyInfoResponse, error)
}

type surveyClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyClient(cc grpc.ClientConnInterface) SurveyClient {
	return &surveyClient{cc}
}

func (c *surveyClient) AddSurvey(ctx context.Context, in *AddSurveyRequest, opts ...grpc.CallOption) (*AddSurveyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSurveyResponse)
	err := c.cc.Invoke(ctx, Survey_AddSurvey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyClient) GetSurveyInfo(ctx context.Context, in *GetSurveyInfoRequest, opts ...grpc.CallOption) (*GetSurveyInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSurveyInfoResponse)
	err := c.cc.Invoke(ctx, Survey_GetSurveyInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyServer is the server API for Survey service.
// All implementations must embed UnimplementedSurveyServer
// for forward compatibility.
type SurveyServer interface {
	AddSurvey(context.Context, *AddSurveyRequest) (*AddSurveyResponse, error)
	GetSurveyInfo(context.Context, *GetSurveyInfoRequest) (*GetSurveyInfoResponse, error)
	mustEmbedUnimplementedSurveyServer()
}

// UnimplementedSurveyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSurveyServer struct{}

func (UnimplementedSurveyServer) AddSurvey(context.Context, *AddSurveyRequest) (*AddSurveyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSurvey not implemented")
}
func (UnimplementedSurveyServer) GetSurveyInfo(context.Context, *GetSurveyInfoRequest) (*GetSurveyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyInfo not implemented")
}
func (UnimplementedSurveyServer) mustEmbedUnimplementedSurveyServer() {}
func (UnimplementedSurveyServer) testEmbeddedByValue()                {}

// UnsafeSurveyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyServer will
// result in compilation errors.
type UnsafeSurveyServer interface {
	mustEmbedUnimplementedSurveyServer()
}

func RegisterSurveyServer(s grpc.ServiceRegistrar, srv SurveyServer) {
	// If the following call pancis, it indicates UnimplementedSurveyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Survey_ServiceDesc, srv)
}

func _Survey_AddSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSurveyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServer).AddSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Survey_AddSurvey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServer).AddSurvey(ctx, req.(*AddSurveyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Survey_GetSurveyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServer).GetSurveyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Survey_GetSurveyInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServer).GetSurveyInfo(ctx, req.(*GetSurveyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Survey_ServiceDesc is the grpc.ServiceDesc for Survey service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Survey_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "survey.Survey",
	HandlerType: (*SurveyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSurvey",
			Handler:    _Survey_AddSurvey_Handler,
		},
		{
			MethodName: "GetSurveyInfo",
			Handler:    _Survey_GetSurveyInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "survey.proto",
}
