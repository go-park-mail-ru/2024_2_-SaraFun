// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2024_2_SaraFun/internal/pkg/communications/usecase/reaction (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_2_SaraFun/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddReaction mocks base method.
func (m *MockRepository) AddReaction(arg0 context.Context, arg1 models.Reaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReaction indicates an expected call of AddReaction.
func (mr *MockRepositoryMockRecorder) AddReaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReaction", reflect.TypeOf((*MockRepository)(nil).AddReaction), arg0, arg1)
}

// CheckMatchExists mocks base method.
func (m *MockRepository) CheckMatchExists(arg0 context.Context, arg1, arg2 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMatchExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckMatchExists indicates an expected call of CheckMatchExists.
func (mr *MockRepositoryMockRecorder) CheckMatchExists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMatchExists", reflect.TypeOf((*MockRepository)(nil).CheckMatchExists), arg0, arg1, arg2)
}

// GetMatchList mocks base method.
func (m *MockRepository) GetMatchList(arg0 context.Context, arg1 int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchList", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchList indicates an expected call of GetMatchList.
func (mr *MockRepositoryMockRecorder) GetMatchList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchList", reflect.TypeOf((*MockRepository)(nil).GetMatchList), arg0, arg1)
}

// GetMatchTime mocks base method.
func (m *MockRepository) GetMatchTime(arg0 context.Context, arg1, arg2 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchTime", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchTime indicates an expected call of GetMatchTime.
func (mr *MockRepositoryMockRecorder) GetMatchTime(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchTime", reflect.TypeOf((*MockRepository)(nil).GetMatchTime), arg0, arg1, arg2)
}

// GetMatchesByFirstName mocks base method.
func (m *MockRepository) GetMatchesByFirstName(arg0 context.Context, arg1 int, arg2 string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchesByFirstName", arg0, arg1, arg2)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchesByFirstName indicates an expected call of GetMatchesByFirstName.
func (mr *MockRepositoryMockRecorder) GetMatchesByFirstName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchesByFirstName", reflect.TypeOf((*MockRepository)(nil).GetMatchesByFirstName), arg0, arg1, arg2)
}

// GetMatchesByString mocks base method.
func (m *MockRepository) GetMatchesByString(arg0 context.Context, arg1 int, arg2 string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchesByString", arg0, arg1, arg2)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchesByString indicates an expected call of GetMatchesByString.
func (mr *MockRepositoryMockRecorder) GetMatchesByString(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchesByString", reflect.TypeOf((*MockRepository)(nil).GetMatchesByString), arg0, arg1, arg2)
}

// GetMatchesByUsername mocks base method.
func (m *MockRepository) GetMatchesByUsername(arg0 context.Context, arg1 int, arg2 string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchesByUsername", arg0, arg1, arg2)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchesByUsername indicates an expected call of GetMatchesByUsername.
func (mr *MockRepositoryMockRecorder) GetMatchesByUsername(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchesByUsername", reflect.TypeOf((*MockRepository)(nil).GetMatchesByUsername), arg0, arg1, arg2)
}

// GetReactionList mocks base method.
func (m *MockRepository) GetReactionList(arg0 context.Context, arg1 int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReactionList", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReactionList indicates an expected call of GetReactionList.
func (mr *MockRepositoryMockRecorder) GetReactionList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReactionList", reflect.TypeOf((*MockRepository)(nil).GetReactionList), arg0, arg1)
}

// UpdateOrCreateReaction mocks base method.
func (m *MockRepository) UpdateOrCreateReaction(arg0 context.Context, arg1 models.Reaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateReaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrCreateReaction indicates an expected call of UpdateOrCreateReaction.
func (mr *MockRepositoryMockRecorder) UpdateOrCreateReaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateReaction", reflect.TypeOf((*MockRepository)(nil).UpdateOrCreateReaction), arg0, arg1)
}
