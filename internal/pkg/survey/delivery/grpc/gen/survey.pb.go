// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: survey.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddSurveyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Survey *SSurvey `protobuf:"bytes,1,opt,name=Survey,proto3" json:"Survey,omitempty"`
}

func (x *AddSurveyRequest) Reset() {
	*x = AddSurveyRequest{}
	mi := &file_survey_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddSurveyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSurveyRequest) ProtoMessage() {}

func (x *AddSurveyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSurveyRequest.ProtoReflect.Descriptor instead.
func (*AddSurveyRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{0}
}

func (x *AddSurveyRequest) GetSurvey() *SSurvey {
	if x != nil {
		return x.Survey
	}
	return nil
}

type AddSurveyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyID int32 `protobuf:"varint,1,opt,name=surveyID,proto3" json:"surveyID,omitempty"`
}

func (x *AddSurveyResponse) Reset() {
	*x = AddSurveyResponse{}
	mi := &file_survey_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddSurveyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSurveyResponse) ProtoMessage() {}

func (x *AddSurveyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSurveyResponse.ProtoReflect.Descriptor instead.
func (*AddSurveyResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{1}
}

func (x *AddSurveyResponse) GetSurveyID() int32 {
	if x != nil {
		return x.SurveyID
	}
	return 0
}

type GetSurveyInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSurveyInfoRequest) Reset() {
	*x = GetSurveyInfoRequest{}
	mi := &file_survey_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSurveyInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSurveyInfoRequest) ProtoMessage() {}

func (x *GetSurveyInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSurveyInfoRequest.ProtoReflect.Descriptor instead.
func (*GetSurveyInfoRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{2}
}

type GetSurveyInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []*Stat `protobuf:"bytes,1,rep,name=Stats,proto3" json:"Stats,omitempty"`
}

func (x *GetSurveyInfoResponse) Reset() {
	*x = GetSurveyInfoResponse{}
	mi := &file_survey_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSurveyInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSurveyInfoResponse) ProtoMessage() {}

func (x *GetSurveyInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSurveyInfoResponse.ProtoReflect.Descriptor instead.
func (*GetSurveyInfoResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{3}
}

func (x *GetSurveyInfoResponse) GetStats() []*Stat {
	if x != nil {
		return x.Stats
	}
	return nil
}

type SSurvey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author   int32  `protobuf:"varint,1,opt,name=Author,proto3" json:"Author,omitempty"`
	Question string `protobuf:"bytes,2,opt,name=Question,proto3" json:"Question,omitempty"`
	Comment  string `protobuf:"bytes,3,opt,name=Comment,proto3" json:"Comment,omitempty"`
	Rating   int32  `protobuf:"varint,4,opt,name=Rating,proto3" json:"Rating,omitempty"`
	Grade    int32  `protobuf:"varint,5,opt,name=Grade,proto3" json:"Grade,omitempty"`
}

func (x *SSurvey) Reset() {
	*x = SSurvey{}
	mi := &file_survey_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSurvey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSurvey) ProtoMessage() {}

func (x *SSurvey) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSurvey.ProtoReflect.Descriptor instead.
func (*SSurvey) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{4}
}

func (x *SSurvey) GetAuthor() int32 {
	if x != nil {
		return x.Author
	}
	return 0
}

func (x *SSurvey) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *SSurvey) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SSurvey) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *SSurvey) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

type Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question  string  `protobuf:"bytes,1,opt,name=Question,proto3" json:"Question,omitempty"`
	AvgRating float32 `protobuf:"fixed32,2,opt,name=avgRating,proto3" json:"avgRating,omitempty"`
	Grade     int32   `protobuf:"varint,3,opt,name=Grade,proto3" json:"Grade,omitempty"`
}

func (x *Stat) Reset() {
	*x = Stat{}
	mi := &file_survey_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stat) ProtoMessage() {}

func (x *Stat) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stat.ProtoReflect.Descriptor instead.
func (*Stat) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{5}
}

func (x *Stat) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *Stat) GetAvgRating() float32 {
	if x != nil {
		return x.AvgRating
	}
	return 0
}

func (x *Stat) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

var File_survey_proto protoreflect.FileDescriptor

var file_survey_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x22, 0x3b, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x73, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x06, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x22, 0x2f, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x49, 0x44, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x07, 0x73, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x22, 0x56, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61, 0x76, 0x67, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x32, 0x98, 0x01, 0x0a, 0x06, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x12, 0x18, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2f, 0x5a, 0x2d, 0x2e, 0x2e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x3b, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_survey_proto_rawDescOnce sync.Once
	file_survey_proto_rawDescData = file_survey_proto_rawDesc
)

func file_survey_proto_rawDescGZIP() []byte {
	file_survey_proto_rawDescOnce.Do(func() {
		file_survey_proto_rawDescData = protoimpl.X.CompressGZIP(file_survey_proto_rawDescData)
	})
	return file_survey_proto_rawDescData
}

var file_survey_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_survey_proto_goTypes = []any{
	(*AddSurveyRequest)(nil),      // 0: survey.AddSurveyRequest
	(*AddSurveyResponse)(nil),     // 1: survey.AddSurveyResponse
	(*GetSurveyInfoRequest)(nil),  // 2: survey.GetSurveyInfoRequest
	(*GetSurveyInfoResponse)(nil), // 3: survey.GetSurveyInfoResponse
	(*SSurvey)(nil),               // 4: survey.sSurvey
	(*Stat)(nil),                  // 5: survey.Stat
}
var file_survey_proto_depIdxs = []int32{
	4, // 0: survey.AddSurveyRequest.Survey:type_name -> survey.sSurvey
	5, // 1: survey.GetSurveyInfoResponse.Stats:type_name -> survey.Stat
	0, // 2: survey.Survey.AddSurvey:input_type -> survey.AddSurveyRequest
	2, // 3: survey.Survey.GetSurveyInfo:input_type -> survey.GetSurveyInfoRequest
	1, // 4: survey.Survey.AddSurvey:output_type -> survey.AddSurveyResponse
	3, // 5: survey.Survey.GetSurveyInfo:output_type -> survey.GetSurveyInfoResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_survey_proto_init() }
func file_survey_proto_init() {
	if File_survey_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_survey_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_survey_proto_goTypes,
		DependencyIndexes: file_survey_proto_depIdxs,
		MessageInfos:      file_survey_proto_msgTypes,
	}.Build()
	File_survey_proto = out.File
	file_survey_proto_rawDesc = nil
	file_survey_proto_goTypes = nil
	file_survey_proto_depIdxs = nil
}
