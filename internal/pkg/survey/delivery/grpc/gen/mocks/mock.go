// Code generated by MockGen. DO NOT EDIT.
// Source: survey_grpc.pb.go

// Package mock_gen is a generated GoMock package.
package mock_gen

import (
	context "context"
	reflect "reflect"

	gen "github.com/go-park-mail-ru/2024_2_SaraFun/internal/pkg/survey/delivery/grpc/gen"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSurveyClient is a mock of SurveyClient interface.
type MockSurveyClient struct {
	ctrl     *gomock.Controller
	recorder *MockSurveyClientMockRecorder
}

// MockSurveyClientMockRecorder is the mock recorder for MockSurveyClient.
type MockSurveyClientMockRecorder struct {
	mock *MockSurveyClient
}

// NewMockSurveyClient creates a new mock instance.
func NewMockSurveyClient(ctrl *gomock.Controller) *MockSurveyClient {
	mock := &MockSurveyClient{ctrl: ctrl}
	mock.recorder = &MockSurveyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveyClient) EXPECT() *MockSurveyClientMockRecorder {
	return m.recorder
}

// AddQuestion mocks base method.
func (m *MockSurveyClient) AddQuestion(ctx context.Context, in *gen.AddQuestionRequest, opts ...grpc.CallOption) (*gen.AddQuestionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddQuestion", varargs...)
	ret0, _ := ret[0].(*gen.AddQuestionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuestion indicates an expected call of AddQuestion.
func (mr *MockSurveyClientMockRecorder) AddQuestion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestion", reflect.TypeOf((*MockSurveyClient)(nil).AddQuestion), varargs...)
}

// AddSurvey mocks base method.
func (m *MockSurveyClient) AddSurvey(ctx context.Context, in *gen.AddSurveyRequest, opts ...grpc.CallOption) (*gen.AddSurveyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSurvey", varargs...)
	ret0, _ := ret[0].(*gen.AddSurveyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSurvey indicates an expected call of AddSurvey.
func (mr *MockSurveyClientMockRecorder) AddSurvey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSurvey", reflect.TypeOf((*MockSurveyClient)(nil).AddSurvey), varargs...)
}

// DeleteQuestion mocks base method.
func (m *MockSurveyClient) DeleteQuestion(ctx context.Context, in *gen.DeleteQuestionRequest, opts ...grpc.CallOption) (*gen.DeleteQuestionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteQuestion", varargs...)
	ret0, _ := ret[0].(*gen.DeleteQuestionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQuestion indicates an expected call of DeleteQuestion.
func (mr *MockSurveyClientMockRecorder) DeleteQuestion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestion", reflect.TypeOf((*MockSurveyClient)(nil).DeleteQuestion), varargs...)
}

// GetQuestions mocks base method.
func (m *MockSurveyClient) GetQuestions(ctx context.Context, in *gen.GetQuestionsRequest, opts ...grpc.CallOption) (*gen.GetQuestionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQuestions", varargs...)
	ret0, _ := ret[0].(*gen.GetQuestionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestions indicates an expected call of GetQuestions.
func (mr *MockSurveyClientMockRecorder) GetQuestions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockSurveyClient)(nil).GetQuestions), varargs...)
}

// GetSurveyInfo mocks base method.
func (m *MockSurveyClient) GetSurveyInfo(ctx context.Context, in *gen.GetSurveyInfoRequest, opts ...grpc.CallOption) (*gen.GetSurveyInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSurveyInfo", varargs...)
	ret0, _ := ret[0].(*gen.GetSurveyInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSurveyInfo indicates an expected call of GetSurveyInfo.
func (mr *MockSurveyClientMockRecorder) GetSurveyInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSurveyInfo", reflect.TypeOf((*MockSurveyClient)(nil).GetSurveyInfo), varargs...)
}

// UpdateQuestion mocks base method.
func (m *MockSurveyClient) UpdateQuestion(ctx context.Context, in *gen.UpdateQuestionRequest, opts ...grpc.CallOption) (*gen.UpdateQuestionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateQuestion", varargs...)
	ret0, _ := ret[0].(*gen.UpdateQuestionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuestion indicates an expected call of UpdateQuestion.
func (mr *MockSurveyClientMockRecorder) UpdateQuestion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockSurveyClient)(nil).UpdateQuestion), varargs...)
}

// MockSurveyServer is a mock of SurveyServer interface.
type MockSurveyServer struct {
	ctrl     *gomock.Controller
	recorder *MockSurveyServerMockRecorder
}

// MockSurveyServerMockRecorder is the mock recorder for MockSurveyServer.
type MockSurveyServerMockRecorder struct {
	mock *MockSurveyServer
}

// NewMockSurveyServer creates a new mock instance.
func NewMockSurveyServer(ctrl *gomock.Controller) *MockSurveyServer {
	mock := &MockSurveyServer{ctrl: ctrl}
	mock.recorder = &MockSurveyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveyServer) EXPECT() *MockSurveyServerMockRecorder {
	return m.recorder
}

// AddQuestion mocks base method.
func (m *MockSurveyServer) AddQuestion(arg0 context.Context, arg1 *gen.AddQuestionRequest) (*gen.AddQuestionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuestion", arg0, arg1)
	ret0, _ := ret[0].(*gen.AddQuestionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuestion indicates an expected call of AddQuestion.
func (mr *MockSurveyServerMockRecorder) AddQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestion", reflect.TypeOf((*MockSurveyServer)(nil).AddQuestion), arg0, arg1)
}

// AddSurvey mocks base method.
func (m *MockSurveyServer) AddSurvey(arg0 context.Context, arg1 *gen.AddSurveyRequest) (*gen.AddSurveyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSurvey", arg0, arg1)
	ret0, _ := ret[0].(*gen.AddSurveyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSurvey indicates an expected call of AddSurvey.
func (mr *MockSurveyServerMockRecorder) AddSurvey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSurvey", reflect.TypeOf((*MockSurveyServer)(nil).AddSurvey), arg0, arg1)
}

// DeleteQuestion mocks base method.
func (m *MockSurveyServer) DeleteQuestion(arg0 context.Context, arg1 *gen.DeleteQuestionRequest) (*gen.DeleteQuestionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestion", arg0, arg1)
	ret0, _ := ret[0].(*gen.DeleteQuestionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQuestion indicates an expected call of DeleteQuestion.
func (mr *MockSurveyServerMockRecorder) DeleteQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestion", reflect.TypeOf((*MockSurveyServer)(nil).DeleteQuestion), arg0, arg1)
}

// GetQuestions mocks base method.
func (m *MockSurveyServer) GetQuestions(arg0 context.Context, arg1 *gen.GetQuestionsRequest) (*gen.GetQuestionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestions", arg0, arg1)
	ret0, _ := ret[0].(*gen.GetQuestionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestions indicates an expected call of GetQuestions.
func (mr *MockSurveyServerMockRecorder) GetQuestions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockSurveyServer)(nil).GetQuestions), arg0, arg1)
}

// GetSurveyInfo mocks base method.
func (m *MockSurveyServer) GetSurveyInfo(arg0 context.Context, arg1 *gen.GetSurveyInfoRequest) (*gen.GetSurveyInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSurveyInfo", arg0, arg1)
	ret0, _ := ret[0].(*gen.GetSurveyInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSurveyInfo indicates an expected call of GetSurveyInfo.
func (mr *MockSurveyServerMockRecorder) GetSurveyInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSurveyInfo", reflect.TypeOf((*MockSurveyServer)(nil).GetSurveyInfo), arg0, arg1)
}

// UpdateQuestion mocks base method.
func (m *MockSurveyServer) UpdateQuestion(arg0 context.Context, arg1 *gen.UpdateQuestionRequest) (*gen.UpdateQuestionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestion", arg0, arg1)
	ret0, _ := ret[0].(*gen.UpdateQuestionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuestion indicates an expected call of UpdateQuestion.
func (mr *MockSurveyServerMockRecorder) UpdateQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockSurveyServer)(nil).UpdateQuestion), arg0, arg1)
}

// mustEmbedUnimplementedSurveyServer mocks base method.
func (m *MockSurveyServer) mustEmbedUnimplementedSurveyServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSurveyServer")
}

// mustEmbedUnimplementedSurveyServer indicates an expected call of mustEmbedUnimplementedSurveyServer.
func (mr *MockSurveyServerMockRecorder) mustEmbedUnimplementedSurveyServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSurveyServer", reflect.TypeOf((*MockSurveyServer)(nil).mustEmbedUnimplementedSurveyServer))
}

// MockUnsafeSurveyServer is a mock of UnsafeSurveyServer interface.
type MockUnsafeSurveyServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSurveyServerMockRecorder
}

// MockUnsafeSurveyServerMockRecorder is the mock recorder for MockUnsafeSurveyServer.
type MockUnsafeSurveyServerMockRecorder struct {
	mock *MockUnsafeSurveyServer
}

// NewMockUnsafeSurveyServer creates a new mock instance.
func NewMockUnsafeSurveyServer(ctrl *gomock.Controller) *MockUnsafeSurveyServer {
	mock := &MockUnsafeSurveyServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSurveyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSurveyServer) EXPECT() *MockUnsafeSurveyServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSurveyServer mocks base method.
func (m *MockUnsafeSurveyServer) mustEmbedUnimplementedSurveyServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSurveyServer")
}

// mustEmbedUnimplementedSurveyServer indicates an expected call of mustEmbedUnimplementedSurveyServer.
func (mr *MockUnsafeSurveyServerMockRecorder) mustEmbedUnimplementedSurveyServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSurveyServer", reflect.TypeOf((*MockUnsafeSurveyServer)(nil).mustEmbedUnimplementedSurveyServer))
}
