// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2024_2_SaraFun/internal/pkg/personalities/delivery/grpc/gen (interfaces: PersonalitiesClient)

// Package signin_mocks is a generated GoMock package.
package signin_mocks

import (
	context "context"
	reflect "reflect"

	gen "github.com/go-park-mail-ru/2024_2_SaraFun/internal/pkg/personalities/delivery/grpc/gen"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPersonalitiesClient is a mock of PersonalitiesClient interface.
type MockPersonalitiesClient struct {
	ctrl     *gomock.Controller
	recorder *MockPersonalitiesClientMockRecorder
}

// MockPersonalitiesClientMockRecorder is the mock recorder for MockPersonalitiesClient.
type MockPersonalitiesClientMockRecorder struct {
	mock *MockPersonalitiesClient
}

// NewMockPersonalitiesClient creates a new mock instance.
func NewMockPersonalitiesClient(ctrl *gomock.Controller) *MockPersonalitiesClient {
	mock := &MockPersonalitiesClient{ctrl: ctrl}
	mock.recorder = &MockPersonalitiesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonalitiesClient) EXPECT() *MockPersonalitiesClientMockRecorder {
	return m.recorder
}

// CheckPassword mocks base method.
func (m *MockPersonalitiesClient) CheckPassword(arg0 context.Context, arg1 *gen.CheckPasswordRequest, arg2 ...grpc.CallOption) (*gen.CheckPasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckPassword", varargs...)
	ret0, _ := ret[0].(*gen.CheckPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockPersonalitiesClientMockRecorder) CheckPassword(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockPersonalitiesClient)(nil).CheckPassword), varargs...)
}

// CheckUsernameExists mocks base method.
func (m *MockPersonalitiesClient) CheckUsernameExists(arg0 context.Context, arg1 *gen.CheckUsernameExistsRequest, arg2 ...grpc.CallOption) (*gen.CheckUsernameExistsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckUsernameExists", varargs...)
	ret0, _ := ret[0].(*gen.CheckUsernameExistsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUsernameExists indicates an expected call of CheckUsernameExists.
func (mr *MockPersonalitiesClientMockRecorder) CheckUsernameExists(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUsernameExists", reflect.TypeOf((*MockPersonalitiesClient)(nil).CheckUsernameExists), varargs...)
}

// CreateProfile mocks base method.
func (m *MockPersonalitiesClient) CreateProfile(arg0 context.Context, arg1 *gen.CreateProfileRequest, arg2 ...grpc.CallOption) (*gen.CreateProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProfile", varargs...)
	ret0, _ := ret[0].(*gen.CreateProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockPersonalitiesClientMockRecorder) CreateProfile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockPersonalitiesClient)(nil).CreateProfile), varargs...)
}

// DeleteProfile mocks base method.
func (m *MockPersonalitiesClient) DeleteProfile(arg0 context.Context, arg1 *gen.DeleteProfileRequest, arg2 ...grpc.CallOption) (*gen.DeleteProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProfile", varargs...)
	ret0, _ := ret[0].(*gen.DeleteProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfile indicates an expected call of DeleteProfile.
func (mr *MockPersonalitiesClientMockRecorder) DeleteProfile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockPersonalitiesClient)(nil).DeleteProfile), varargs...)
}

// GetFeedList mocks base method.
func (m *MockPersonalitiesClient) GetFeedList(arg0 context.Context, arg1 *gen.GetFeedListRequest, arg2 ...grpc.CallOption) (*gen.GetFeedListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeedList", varargs...)
	ret0, _ := ret[0].(*gen.GetFeedListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedList indicates an expected call of GetFeedList.
func (mr *MockPersonalitiesClientMockRecorder) GetFeedList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedList", reflect.TypeOf((*MockPersonalitiesClient)(nil).GetFeedList), varargs...)
}

// GetProfile mocks base method.
func (m *MockPersonalitiesClient) GetProfile(arg0 context.Context, arg1 *gen.GetProfileRequest, arg2 ...grpc.CallOption) (*gen.GetProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfile", varargs...)
	ret0, _ := ret[0].(*gen.GetProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockPersonalitiesClientMockRecorder) GetProfile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockPersonalitiesClient)(nil).GetProfile), varargs...)
}

// GetProfileIDByUserID mocks base method.
func (m *MockPersonalitiesClient) GetProfileIDByUserID(arg0 context.Context, arg1 *gen.GetProfileIDByUserIDRequest, arg2 ...grpc.CallOption) (*gen.GetProfileIDByUserIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfileIDByUserID", varargs...)
	ret0, _ := ret[0].(*gen.GetProfileIDByUserIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileIDByUserID indicates an expected call of GetProfileIDByUserID.
func (mr *MockPersonalitiesClientMockRecorder) GetProfileIDByUserID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileIDByUserID", reflect.TypeOf((*MockPersonalitiesClient)(nil).GetProfileIDByUserID), varargs...)
}

// GetUserIDByUsername mocks base method.
func (m *MockPersonalitiesClient) GetUserIDByUsername(arg0 context.Context, arg1 *gen.GetUserIDByUsernameRequest, arg2 ...grpc.CallOption) (*gen.GetUserIDByUsernameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserIDByUsername", varargs...)
	ret0, _ := ret[0].(*gen.GetUserIDByUsernameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByUsername indicates an expected call of GetUserIDByUsername.
func (mr *MockPersonalitiesClientMockRecorder) GetUserIDByUsername(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByUsername", reflect.TypeOf((*MockPersonalitiesClient)(nil).GetUserIDByUsername), varargs...)
}

// GetUsernameByUserID mocks base method.
func (m *MockPersonalitiesClient) GetUsernameByUserID(arg0 context.Context, arg1 *gen.GetUsernameByUserIDRequest, arg2 ...grpc.CallOption) (*gen.GetUsernameByUserIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsernameByUserID", varargs...)
	ret0, _ := ret[0].(*gen.GetUsernameByUserIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsernameByUserID indicates an expected call of GetUsernameByUserID.
func (mr *MockPersonalitiesClientMockRecorder) GetUsernameByUserID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsernameByUserID", reflect.TypeOf((*MockPersonalitiesClient)(nil).GetUsernameByUserID), varargs...)
}

// RegisterUser mocks base method.
func (m *MockPersonalitiesClient) RegisterUser(arg0 context.Context, arg1 *gen.RegisterUserRequest, arg2 ...grpc.CallOption) (*gen.RegisterUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterUser", varargs...)
	ret0, _ := ret[0].(*gen.RegisterUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockPersonalitiesClientMockRecorder) RegisterUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockPersonalitiesClient)(nil).RegisterUser), varargs...)
}

// UpdateProfile mocks base method.
func (m *MockPersonalitiesClient) UpdateProfile(arg0 context.Context, arg1 *gen.UpdateProfileRequest, arg2 ...grpc.CallOption) (*gen.UpdateProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProfile", varargs...)
	ret0, _ := ret[0].(*gen.UpdateProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockPersonalitiesClientMockRecorder) UpdateProfile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockPersonalitiesClient)(nil).UpdateProfile), varargs...)
}
