// Code generated by MockGen. DO NOT EDIT.
// Source: message_grpc.pb.go

// Package mock_gen is a generated GoMock package.
package mock_gen

import (
	context "context"
	reflect "reflect"

	gen "github.com/go-park-mail-ru/2024_2_SaraFun/internal/pkg/message/delivery/grpc/gen"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMessageClient is a mock of MessageClient interface.
type MockMessageClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessageClientMockRecorder
}

// MockMessageClientMockRecorder is the mock recorder for MockMessageClient.
type MockMessageClientMockRecorder struct {
	mock *MockMessageClient
}

// NewMockMessageClient creates a new mock instance.
func NewMockMessageClient(ctrl *gomock.Controller) *MockMessageClient {
	mock := &MockMessageClient{ctrl: ctrl}
	mock.recorder = &MockMessageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageClient) EXPECT() *MockMessageClientMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockMessageClient) AddMessage(ctx context.Context, in *gen.AddMessageRequest, opts ...grpc.CallOption) (*gen.AddMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMessage", varargs...)
	ret0, _ := ret[0].(*gen.AddMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockMessageClientMockRecorder) AddMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockMessageClient)(nil).AddMessage), varargs...)
}

// AddReport mocks base method.
func (m *MockMessageClient) AddReport(ctx context.Context, in *gen.AddReportRequest, opts ...grpc.CallOption) (*gen.AddReportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddReport", varargs...)
	ret0, _ := ret[0].(*gen.AddReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReport indicates an expected call of AddReport.
func (mr *MockMessageClientMockRecorder) AddReport(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReport", reflect.TypeOf((*MockMessageClient)(nil).AddReport), varargs...)
}

// CheckUsersBlockNotExists mocks base method.
func (m *MockMessageClient) CheckUsersBlockNotExists(ctx context.Context, in *gen.CheckUsersBlockNotExistsRequest, opts ...grpc.CallOption) (*gen.CheckUsersBlockNotExistsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckUsersBlockNotExists", varargs...)
	ret0, _ := ret[0].(*gen.CheckUsersBlockNotExistsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUsersBlockNotExists indicates an expected call of CheckUsersBlockNotExists.
func (mr *MockMessageClientMockRecorder) CheckUsersBlockNotExists(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUsersBlockNotExists", reflect.TypeOf((*MockMessageClient)(nil).CheckUsersBlockNotExists), varargs...)
}

// GetChatMessages mocks base method.
func (m *MockMessageClient) GetChatMessages(ctx context.Context, in *gen.GetChatMessagesRequest, opts ...grpc.CallOption) (*gen.GetChatMessagesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChatMessages", varargs...)
	ret0, _ := ret[0].(*gen.GetChatMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMessages indicates an expected call of GetChatMessages.
func (mr *MockMessageClientMockRecorder) GetChatMessages(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessages", reflect.TypeOf((*MockMessageClient)(nil).GetChatMessages), varargs...)
}

// GetLastMessage mocks base method.
func (m *MockMessageClient) GetLastMessage(ctx context.Context, in *gen.GetLastMessageRequest, opts ...grpc.CallOption) (*gen.GetLastMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLastMessage", varargs...)
	ret0, _ := ret[0].(*gen.GetLastMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastMessage indicates an expected call of GetLastMessage.
func (mr *MockMessageClientMockRecorder) GetLastMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastMessage", reflect.TypeOf((*MockMessageClient)(nil).GetLastMessage), varargs...)
}

// GetMessagesBySearch mocks base method.
func (m *MockMessageClient) GetMessagesBySearch(ctx context.Context, in *gen.GetMessagesBySearchRequest, opts ...grpc.CallOption) (*gen.GetMessagesBySearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMessagesBySearch", varargs...)
	ret0, _ := ret[0].(*gen.GetMessagesBySearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesBySearch indicates an expected call of GetMessagesBySearch.
func (mr *MockMessageClientMockRecorder) GetMessagesBySearch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesBySearch", reflect.TypeOf((*MockMessageClient)(nil).GetMessagesBySearch), varargs...)
}

// GetReportIfExists mocks base method.
func (m *MockMessageClient) GetReportIfExists(ctx context.Context, in *gen.GetReportIfExistsRequest, opts ...grpc.CallOption) (*gen.GetReportIfExistsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReportIfExists", varargs...)
	ret0, _ := ret[0].(*gen.GetReportIfExistsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportIfExists indicates an expected call of GetReportIfExists.
func (mr *MockMessageClientMockRecorder) GetReportIfExists(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportIfExists", reflect.TypeOf((*MockMessageClient)(nil).GetReportIfExists), varargs...)
}

// MockMessageServer is a mock of MessageServer interface.
type MockMessageServer struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServerMockRecorder
}

// MockMessageServerMockRecorder is the mock recorder for MockMessageServer.
type MockMessageServerMockRecorder struct {
	mock *MockMessageServer
}

// NewMockMessageServer creates a new mock instance.
func NewMockMessageServer(ctrl *gomock.Controller) *MockMessageServer {
	mock := &MockMessageServer{ctrl: ctrl}
	mock.recorder = &MockMessageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageServer) EXPECT() *MockMessageServerMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockMessageServer) AddMessage(arg0 context.Context, arg1 *gen.AddMessageRequest) (*gen.AddMessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessage", arg0, arg1)
	ret0, _ := ret[0].(*gen.AddMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockMessageServerMockRecorder) AddMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockMessageServer)(nil).AddMessage), arg0, arg1)
}

// AddReport mocks base method.
func (m *MockMessageServer) AddReport(arg0 context.Context, arg1 *gen.AddReportRequest) (*gen.AddReportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReport", arg0, arg1)
	ret0, _ := ret[0].(*gen.AddReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReport indicates an expected call of AddReport.
func (mr *MockMessageServerMockRecorder) AddReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReport", reflect.TypeOf((*MockMessageServer)(nil).AddReport), arg0, arg1)
}

// CheckUsersBlockNotExists mocks base method.
func (m *MockMessageServer) CheckUsersBlockNotExists(arg0 context.Context, arg1 *gen.CheckUsersBlockNotExistsRequest) (*gen.CheckUsersBlockNotExistsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUsersBlockNotExists", arg0, arg1)
	ret0, _ := ret[0].(*gen.CheckUsersBlockNotExistsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUsersBlockNotExists indicates an expected call of CheckUsersBlockNotExists.
func (mr *MockMessageServerMockRecorder) CheckUsersBlockNotExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUsersBlockNotExists", reflect.TypeOf((*MockMessageServer)(nil).CheckUsersBlockNotExists), arg0, arg1)
}

// GetChatMessages mocks base method.
func (m *MockMessageServer) GetChatMessages(arg0 context.Context, arg1 *gen.GetChatMessagesRequest) (*gen.GetChatMessagesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessages", arg0, arg1)
	ret0, _ := ret[0].(*gen.GetChatMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMessages indicates an expected call of GetChatMessages.
func (mr *MockMessageServerMockRecorder) GetChatMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessages", reflect.TypeOf((*MockMessageServer)(nil).GetChatMessages), arg0, arg1)
}

// GetLastMessage mocks base method.
func (m *MockMessageServer) GetLastMessage(arg0 context.Context, arg1 *gen.GetLastMessageRequest) (*gen.GetLastMessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastMessage", arg0, arg1)
	ret0, _ := ret[0].(*gen.GetLastMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastMessage indicates an expected call of GetLastMessage.
func (mr *MockMessageServerMockRecorder) GetLastMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastMessage", reflect.TypeOf((*MockMessageServer)(nil).GetLastMessage), arg0, arg1)
}

// GetMessagesBySearch mocks base method.
func (m *MockMessageServer) GetMessagesBySearch(arg0 context.Context, arg1 *gen.GetMessagesBySearchRequest) (*gen.GetMessagesBySearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesBySearch", arg0, arg1)
	ret0, _ := ret[0].(*gen.GetMessagesBySearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesBySearch indicates an expected call of GetMessagesBySearch.
func (mr *MockMessageServerMockRecorder) GetMessagesBySearch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesBySearch", reflect.TypeOf((*MockMessageServer)(nil).GetMessagesBySearch), arg0, arg1)
}

// GetReportIfExists mocks base method.
func (m *MockMessageServer) GetReportIfExists(arg0 context.Context, arg1 *gen.GetReportIfExistsRequest) (*gen.GetReportIfExistsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportIfExists", arg0, arg1)
	ret0, _ := ret[0].(*gen.GetReportIfExistsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportIfExists indicates an expected call of GetReportIfExists.
func (mr *MockMessageServerMockRecorder) GetReportIfExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportIfExists", reflect.TypeOf((*MockMessageServer)(nil).GetReportIfExists), arg0, arg1)
}

// mustEmbedUnimplementedMessageServer mocks base method.
func (m *MockMessageServer) mustEmbedUnimplementedMessageServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMessageServer")
}

// mustEmbedUnimplementedMessageServer indicates an expected call of mustEmbedUnimplementedMessageServer.
func (mr *MockMessageServerMockRecorder) mustEmbedUnimplementedMessageServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMessageServer", reflect.TypeOf((*MockMessageServer)(nil).mustEmbedUnimplementedMessageServer))
}

// MockUnsafeMessageServer is a mock of UnsafeMessageServer interface.
type MockUnsafeMessageServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMessageServerMockRecorder
}

// MockUnsafeMessageServerMockRecorder is the mock recorder for MockUnsafeMessageServer.
type MockUnsafeMessageServerMockRecorder struct {
	mock *MockUnsafeMessageServer
}

// NewMockUnsafeMessageServer creates a new mock instance.
func NewMockUnsafeMessageServer(ctrl *gomock.Controller) *MockUnsafeMessageServer {
	mock := &MockUnsafeMessageServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMessageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMessageServer) EXPECT() *MockUnsafeMessageServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMessageServer mocks base method.
func (m *MockUnsafeMessageServer) mustEmbedUnimplementedMessageServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMessageServer")
}

// mustEmbedUnimplementedMessageServer indicates an expected call of mustEmbedUnimplementedMessageServer.
func (mr *MockUnsafeMessageServerMockRecorder) mustEmbedUnimplementedMessageServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMessageServer", reflect.TypeOf((*MockUnsafeMessageServer)(nil).mustEmbedUnimplementedMessageServer))
}
