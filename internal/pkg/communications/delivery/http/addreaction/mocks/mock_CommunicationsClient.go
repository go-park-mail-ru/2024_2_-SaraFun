// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2024_2_SaraFun/internal/pkg/communications/delivery/grpc/gen (interfaces: CommunicationsClient)

// Package addreaction_mocks is a generated GoMock package.
package addreaction_mocks

import (
	context "context"
	reflect "reflect"

	gen "github.com/go-park-mail-ru/2024_2_SaraFun/internal/pkg/communications/delivery/grpc/gen"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCommunicationsClient is a mock of CommunicationsClient interface.
type MockCommunicationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockCommunicationsClientMockRecorder
}

// MockCommunicationsClientMockRecorder is the mock recorder for MockCommunicationsClient.
type MockCommunicationsClientMockRecorder struct {
	mock *MockCommunicationsClient
}

// NewMockCommunicationsClient creates a new mock instance.
func NewMockCommunicationsClient(ctrl *gomock.Controller) *MockCommunicationsClient {
	mock := &MockCommunicationsClient{ctrl: ctrl}
	mock.recorder = &MockCommunicationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunicationsClient) EXPECT() *MockCommunicationsClientMockRecorder {
	return m.recorder
}

// AddReaction mocks base method.
func (m *MockCommunicationsClient) AddReaction(arg0 context.Context, arg1 *gen.AddReactionRequest, arg2 ...grpc.CallOption) (*gen.AddReactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddReaction", varargs...)
	ret0, _ := ret[0].(*gen.AddReactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReaction indicates an expected call of AddReaction.
func (mr *MockCommunicationsClientMockRecorder) AddReaction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReaction", reflect.TypeOf((*MockCommunicationsClient)(nil).AddReaction), varargs...)
}

// GetMatchList mocks base method.
func (m *MockCommunicationsClient) GetMatchList(arg0 context.Context, arg1 *gen.GetMatchListRequest, arg2 ...grpc.CallOption) (*gen.GetMatchListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMatchList", varargs...)
	ret0, _ := ret[0].(*gen.GetMatchListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchList indicates an expected call of GetMatchList.
func (mr *MockCommunicationsClientMockRecorder) GetMatchList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchList", reflect.TypeOf((*MockCommunicationsClient)(nil).GetMatchList), varargs...)
}

// GetReactionList mocks base method.
func (m *MockCommunicationsClient) GetReactionList(arg0 context.Context, arg1 *gen.GetReactionListRequest, arg2 ...grpc.CallOption) (*gen.GetReactionListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReactionList", varargs...)
	ret0, _ := ret[0].(*gen.GetReactionListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReactionList indicates an expected call of GetReactionList.
func (mr *MockCommunicationsClientMockRecorder) GetReactionList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReactionList", reflect.TypeOf((*MockCommunicationsClient)(nil).GetReactionList), varargs...)
}
