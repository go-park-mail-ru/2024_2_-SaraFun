// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: personalities.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Personalities_RegisterUser_FullMethodName         = "/personalities.Personalities/RegisterUser"
	Personalities_GetFeedList_FullMethodName          = "/personalities.Personalities/GetFeedList"
	Personalities_CheckPassword_FullMethodName        = "/personalities.Personalities/CheckPassword"
	Personalities_GetProfileIDByUserID_FullMethodName = "/personalities.Personalities/GetProfileIDByUserID"
	Personalities_GetUsernameByUserID_FullMethodName  = "/personalities.Personalities/GetUsernameByUserID"
	Personalities_GetUserIDByUsername_FullMethodName  = "/personalities.Personalities/GetUserIDByUsername"
	Personalities_CheckUsernameExists_FullMethodName  = "/personalities.Personalities/CheckUsernameExists"
	Personalities_CreateProfile_FullMethodName        = "/personalities.Personalities/CreateProfile"
	Personalities_UpdateProfile_FullMethodName        = "/personalities.Personalities/UpdateProfile"
	Personalities_GetProfile_FullMethodName           = "/personalities.Personalities/GetProfile"
	Personalities_DeleteProfile_FullMethodName        = "/personalities.Personalities/DeleteProfile"
	Personalities_ChangePassword_FullMethodName       = "/personalities.Personalities/ChangePassword"
)

// PersonalitiesClient is the client API for Personalities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonalitiesClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	GetFeedList(ctx context.Context, in *GetFeedListRequest, opts ...grpc.CallOption) (*GetFeedListResponse, error)
	CheckPassword(ctx context.Context, in *CheckPasswordRequest, opts ...grpc.CallOption) (*CheckPasswordResponse, error)
	GetProfileIDByUserID(ctx context.Context, in *GetProfileIDByUserIDRequest, opts ...grpc.CallOption) (*GetProfileIDByUserIDResponse, error)
	GetUsernameByUserID(ctx context.Context, in *GetUsernameByUserIDRequest, opts ...grpc.CallOption) (*GetUsernameByUserIDResponse, error)
	GetUserIDByUsername(ctx context.Context, in *GetUserIDByUsernameRequest, opts ...grpc.CallOption) (*GetUserIDByUsernameResponse, error)
	CheckUsernameExists(ctx context.Context, in *CheckUsernameExistsRequest, opts ...grpc.CallOption) (*CheckUsernameExistsResponse, error)
	CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...grpc.CallOption) (*DeleteProfileResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
}

type personalitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonalitiesClient(cc grpc.ClientConnInterface) PersonalitiesClient {
	return &personalitiesClient{cc}
}

func (c *personalitiesClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, Personalities_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalitiesClient) GetFeedList(ctx context.Context, in *GetFeedListRequest, opts ...grpc.CallOption) (*GetFeedListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedListResponse)
	err := c.cc.Invoke(ctx, Personalities_GetFeedList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalitiesClient) CheckPassword(ctx context.Context, in *CheckPasswordRequest, opts ...grpc.CallOption) (*CheckPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPasswordResponse)
	err := c.cc.Invoke(ctx, Personalities_CheckPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalitiesClient) GetProfileIDByUserID(ctx context.Context, in *GetProfileIDByUserIDRequest, opts ...grpc.CallOption) (*GetProfileIDByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileIDByUserIDResponse)
	err := c.cc.Invoke(ctx, Personalities_GetProfileIDByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalitiesClient) GetUsernameByUserID(ctx context.Context, in *GetUsernameByUserIDRequest, opts ...grpc.CallOption) (*GetUsernameByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsernameByUserIDResponse)
	err := c.cc.Invoke(ctx, Personalities_GetUsernameByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalitiesClient) GetUserIDByUsername(ctx context.Context, in *GetUserIDByUsernameRequest, opts ...grpc.CallOption) (*GetUserIDByUsernameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserIDByUsernameResponse)
	err := c.cc.Invoke(ctx, Personalities_GetUserIDByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalitiesClient) CheckUsernameExists(ctx context.Context, in *CheckUsernameExistsRequest, opts ...grpc.CallOption) (*CheckUsernameExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUsernameExistsResponse)
	err := c.cc.Invoke(ctx, Personalities_CheckUsernameExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalitiesClient) CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProfileResponse)
	err := c.cc.Invoke(ctx, Personalities_CreateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalitiesClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, Personalities_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalitiesClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, Personalities_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalitiesClient) DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...grpc.CallOption) (*DeleteProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProfileResponse)
	err := c.cc.Invoke(ctx, Personalities_DeleteProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalitiesClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, Personalities_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonalitiesServer is the server API for Personalities service.
// All implementations must embed UnimplementedPersonalitiesServer
// for forward compatibility.
type PersonalitiesServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	GetFeedList(context.Context, *GetFeedListRequest) (*GetFeedListResponse, error)
	CheckPassword(context.Context, *CheckPasswordRequest) (*CheckPasswordResponse, error)
	GetProfileIDByUserID(context.Context, *GetProfileIDByUserIDRequest) (*GetProfileIDByUserIDResponse, error)
	GetUsernameByUserID(context.Context, *GetUsernameByUserIDRequest) (*GetUsernameByUserIDResponse, error)
	GetUserIDByUsername(context.Context, *GetUserIDByUsernameRequest) (*GetUserIDByUsernameResponse, error)
	CheckUsernameExists(context.Context, *CheckUsernameExistsRequest) (*CheckUsernameExistsResponse, error)
	CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	DeleteProfile(context.Context, *DeleteProfileRequest) (*DeleteProfileResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	mustEmbedUnimplementedPersonalitiesServer()
}

// UnimplementedPersonalitiesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPersonalitiesServer struct{}

func (UnimplementedPersonalitiesServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedPersonalitiesServer) GetFeedList(context.Context, *GetFeedListRequest) (*GetFeedListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedList not implemented")
}
func (UnimplementedPersonalitiesServer) CheckPassword(context.Context, *CheckPasswordRequest) (*CheckPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPassword not implemented")
}
func (UnimplementedPersonalitiesServer) GetProfileIDByUserID(context.Context, *GetProfileIDByUserIDRequest) (*GetProfileIDByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileIDByUserID not implemented")
}
func (UnimplementedPersonalitiesServer) GetUsernameByUserID(context.Context, *GetUsernameByUserIDRequest) (*GetUsernameByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsernameByUserID not implemented")
}
func (UnimplementedPersonalitiesServer) GetUserIDByUsername(context.Context, *GetUserIDByUsernameRequest) (*GetUserIDByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIDByUsername not implemented")
}
func (UnimplementedPersonalitiesServer) CheckUsernameExists(context.Context, *CheckUsernameExistsRequest) (*CheckUsernameExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUsernameExists not implemented")
}
func (UnimplementedPersonalitiesServer) CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedPersonalitiesServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedPersonalitiesServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedPersonalitiesServer) DeleteProfile(context.Context, *DeleteProfileRequest) (*DeleteProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedPersonalitiesServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedPersonalitiesServer) mustEmbedUnimplementedPersonalitiesServer() {}
func (UnimplementedPersonalitiesServer) testEmbeddedByValue()                       {}

// UnsafePersonalitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonalitiesServer will
// result in compilation errors.
type UnsafePersonalitiesServer interface {
	mustEmbedUnimplementedPersonalitiesServer()
}

func RegisterPersonalitiesServer(s grpc.ServiceRegistrar, srv PersonalitiesServer) {
	// If the following call pancis, it indicates UnimplementedPersonalitiesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Personalities_ServiceDesc, srv)
}

func _Personalities_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalitiesServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Personalities_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalitiesServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Personalities_GetFeedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalitiesServer).GetFeedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Personalities_GetFeedList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalitiesServer).GetFeedList(ctx, req.(*GetFeedListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Personalities_CheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalitiesServer).CheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Personalities_CheckPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalitiesServer).CheckPassword(ctx, req.(*CheckPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Personalities_GetProfileIDByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileIDByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalitiesServer).GetProfileIDByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Personalities_GetProfileIDByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalitiesServer).GetProfileIDByUserID(ctx, req.(*GetProfileIDByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Personalities_GetUsernameByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsernameByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalitiesServer).GetUsernameByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Personalities_GetUsernameByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalitiesServer).GetUsernameByUserID(ctx, req.(*GetUsernameByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Personalities_GetUserIDByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIDByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalitiesServer).GetUserIDByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Personalities_GetUserIDByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalitiesServer).GetUserIDByUsername(ctx, req.(*GetUserIDByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Personalities_CheckUsernameExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUsernameExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalitiesServer).CheckUsernameExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Personalities_CheckUsernameExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalitiesServer).CheckUsernameExists(ctx, req.(*CheckUsernameExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Personalities_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalitiesServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Personalities_CreateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalitiesServer).CreateProfile(ctx, req.(*CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Personalities_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalitiesServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Personalities_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalitiesServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Personalities_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalitiesServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Personalities_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalitiesServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Personalities_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalitiesServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Personalities_DeleteProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalitiesServer).DeleteProfile(ctx, req.(*DeleteProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Personalities_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalitiesServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Personalities_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalitiesServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Personalities_ServiceDesc is the grpc.ServiceDesc for Personalities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Personalities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "personalities.Personalities",
	HandlerType: (*PersonalitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _Personalities_RegisterUser_Handler,
		},
		{
			MethodName: "GetFeedList",
			Handler:    _Personalities_GetFeedList_Handler,
		},
		{
			MethodName: "CheckPassword",
			Handler:    _Personalities_CheckPassword_Handler,
		},
		{
			MethodName: "GetProfileIDByUserID",
			Handler:    _Personalities_GetProfileIDByUserID_Handler,
		},
		{
			MethodName: "GetUsernameByUserID",
			Handler:    _Personalities_GetUsernameByUserID_Handler,
		},
		{
			MethodName: "GetUserIDByUsername",
			Handler:    _Personalities_GetUserIDByUsername_Handler,
		},
		{
			MethodName: "CheckUsernameExists",
			Handler:    _Personalities_CheckUsernameExists_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _Personalities_CreateProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _Personalities_UpdateProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _Personalities_GetProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _Personalities_DeleteProfile_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Personalities_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "personalities.proto",
}
