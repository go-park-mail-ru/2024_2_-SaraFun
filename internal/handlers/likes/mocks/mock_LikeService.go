// Code generated by MockGen. DO NOT EDIT.
// Source: sparkit/internal/handlers/likes (interfaces: LikeService)

// Package likehandler_mocks is a generated GoMock package.
package likehandler_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLikeService is a mock of LikeService interface.
type MockLikeService struct {
	ctrl     *gomock.Controller
	recorder *MockLikeServiceMockRecorder
}

// MockLikeServiceMockRecorder is the mock recorder for MockLikeService.
type MockLikeServiceMockRecorder struct {
	mock *MockLikeService
}

// NewMockLikeService creates a new mock instance.
func NewMockLikeService(ctrl *gomock.Controller) *MockLikeService {
	mock := &MockLikeService{ctrl: ctrl}
	mock.recorder = &MockLikeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikeService) EXPECT() *MockLikeServiceMockRecorder {
	return m.recorder
}

// ProcessLike mocks base method.
func (m *MockLikeService) ProcessLike(arg0 context.Context, arg1, arg2 int, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessLike", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessLike indicates an expected call of ProcessLike.
func (mr *MockLikeServiceMockRecorder) ProcessLike(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessLike", reflect.TypeOf((*MockLikeService)(nil).ProcessLike), arg0, arg1, arg2, arg3)
}
