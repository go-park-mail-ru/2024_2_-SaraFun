// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2024_2_SaraFun/internal/pkg/survey/delivery/grpc (interfaces: SurveyUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_2_SaraFun/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSurveyUsecase is a mock of SurveyUsecase interface.
type MockSurveyUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSurveyUsecaseMockRecorder
}

// MockSurveyUsecaseMockRecorder is the mock recorder for MockSurveyUsecase.
type MockSurveyUsecaseMockRecorder struct {
	mock *MockSurveyUsecase
}

// NewMockSurveyUsecase creates a new mock instance.
func NewMockSurveyUsecase(ctrl *gomock.Controller) *MockSurveyUsecase {
	mock := &MockSurveyUsecase{ctrl: ctrl}
	mock.recorder = &MockSurveyUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveyUsecase) EXPECT() *MockSurveyUsecaseMockRecorder {
	return m.recorder
}

// AddQuestion mocks base method.
func (m *MockSurveyUsecase) AddQuestion(arg0 context.Context, arg1 models.AdminQuestion) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuestion", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuestion indicates an expected call of AddQuestion.
func (mr *MockSurveyUsecaseMockRecorder) AddQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestion", reflect.TypeOf((*MockSurveyUsecase)(nil).AddQuestion), arg0, arg1)
}

// AddSurvey mocks base method.
func (m *MockSurveyUsecase) AddSurvey(arg0 context.Context, arg1 models.Survey) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSurvey", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSurvey indicates an expected call of AddSurvey.
func (mr *MockSurveyUsecaseMockRecorder) AddSurvey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSurvey", reflect.TypeOf((*MockSurveyUsecase)(nil).AddSurvey), arg0, arg1)
}

// DeleteQuestion mocks base method.
func (m *MockSurveyUsecase) DeleteQuestion(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuestion indicates an expected call of DeleteQuestion.
func (mr *MockSurveyUsecaseMockRecorder) DeleteQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestion", reflect.TypeOf((*MockSurveyUsecase)(nil).DeleteQuestion), arg0, arg1)
}

// GetQuestions mocks base method.
func (m *MockSurveyUsecase) GetQuestions(arg0 context.Context) ([]models.AdminQuestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestions", arg0)
	ret0, _ := ret[0].([]models.AdminQuestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestions indicates an expected call of GetQuestions.
func (mr *MockSurveyUsecaseMockRecorder) GetQuestions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockSurveyUsecase)(nil).GetQuestions), arg0)
}

// GetSurveyInfo mocks base method.
func (m *MockSurveyUsecase) GetSurveyInfo(arg0 context.Context) (map[string]models.SurveyStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSurveyInfo", arg0)
	ret0, _ := ret[0].(map[string]models.SurveyStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSurveyInfo indicates an expected call of GetSurveyInfo.
func (mr *MockSurveyUsecaseMockRecorder) GetSurveyInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSurveyInfo", reflect.TypeOf((*MockSurveyUsecase)(nil).GetSurveyInfo), arg0)
}

// UpdateQuestion mocks base method.
func (m *MockSurveyUsecase) UpdateQuestion(arg0 context.Context, arg1 models.AdminQuestion, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestion", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuestion indicates an expected call of UpdateQuestion.
func (mr *MockSurveyUsecaseMockRecorder) UpdateQuestion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockSurveyUsecase)(nil).UpdateQuestion), arg0, arg1, arg2)
}
